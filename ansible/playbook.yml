---
- hosts: default
  vars:
    timezone: "Asia/Tokyo"
    nodesource: "https://rpm.nodesource.com/setup_16.x"
    app_nginx_conf_src: "/vagrant/ansible/nginx.conf.j2"
    app_nginx_conf_dest: /etc/nginx/default.d/vagrant.conf
    app_svr_dir: "/vagrant/chat-svr"
    app_web_dir: "/vagrant/chat-web"
    app_web_dist_dir: "{{ app_web_dir }}/dist/chat-web"
    app_log_dir: /var/log/local/ws-chat-example
    app_port: 3000
    build_target: build
  tasks:
    - block:
      - block:
        - name: Check timezone
          shell: timedatectl | grep -e {{ timezone }}
          register: timedatectl_timezone
          check_mode: no
          changed_when: false
          failed_when: false
        - name: Set timezone
          shell: timedatectl set-timezone {{ timezone }}
          when: timedatectl_timezone.stdout == ""
      - block:
        - name: Check Node.js repository version
          shell: yum --disablerepo=epel info nodejs | grep -e "Version\s*:\s*1[0-9].*$"
          register: nodejs_repository_version
          check_mode: no
          changed_when: false
          failed_when: false
        - name: Register Node.js repository
          shell: curl --silent --location {{ nodesource }} | bash -
          when: nodejs_repository_version.stdout == ""
        - name: Upgrade all packages
          yum: name=* state=latest
        - name: Install the latest version of Node.js
          yum: name=nodejs state=latest
        - name: Install the latest version of nginx
          yum: name=nginx state=latest
        - name: Install the latest version of Git
          yum: name=git state=latest
      - block:
        - name: Install "pm2" node.js package globally
          npm: name=pm2 global=yes version=^5.2.0
        - name: Install "wscat" node.js package globally
          npm: name=wscat global=yes
      - block:
        - name: Copy the web app configuration to nginx
          template: src={{ app_nginx_conf_src }} dest={{ app_nginx_conf_dest }} force=yes
        - name: Action to enable service nginx
          service: name=nginx state=restarted enabled=yes
      - block:
        - name: Action to disable SELinux for nginx
          selinux: state=permissive policy=targeted
        - name: Action to enable service firewalld
          service: name=firewalld state=started enabled=yes
        - name: Open port for HTTP
          firewalld: service=http permanent=true state=enabled
        - name: Action to reload service firewalld
          service: name=firewalld state=reloaded enabled=yes
      - block:
        - name: Create the web application logging directory
          file: path={{ app_log_dir }} state=directory owner=vagrant group=vagrant mode=0755
      - block:
        - name: Check "pm2" service registration
          shell: systemctl status pm2-vagrant.service | grep -e "enabled"
          register: pm2_service_loaded
          check_mode: no
          changed_when: false
          failed_when: false
        - name: Register "pm2" to service by vagrant user
          shell: pm2 startup systemd -u vagrant --hp /home/vagrant
          when: pm2_service_loaded.stdout == ""
        - name: Action to enable service pm2
          service: name=pm2-vagrant state=started enabled=yes
        - name: Install "pm2-intercom" module to pm2
          shell: pm2 install pm2-intercom
          when: pm2_service_loaded.stdout == ""
          become: false
      become: true

    - block:
      - block:
        - name: Install node.js package for the server application
          shell: npm install chdir={{ app_svr_dir }}
          retries: 2
        - name: Install node.js package for the client application
          shell: npm install chdir={{ app_web_dir }}
          retries: 2
        - name: Build the server application
          shell: npm run {{ build_target }} chdir={{ app_svr_dir }}
        - name: Build the client application
          shell: npm run {{ build_target }} chdir={{ app_web_dir }}
        - name: Register the web application to pm2
          shell: npm start chdir={{ app_svr_dir }}
        - name: Save pm2 current processes
          shell: pm2 save
